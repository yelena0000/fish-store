import os
import logging
from io import BytesIO

import redis
import requests
from environs import Env
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Filters,
    Updater,
    CommandHandler,
    CallbackQueryHandler,
    ConversationHandler,
    MessageHandler,
)

logger = logging.getLogger(__name__)

START, HANDLE_MENU, HANDLE_CART, HANDLE_QUANTITY = range(4)


def get_database_connection(env):
    return redis.Redis(
        host=env.str('REDIS_HOST'),
        port=env.int('REDIS_PORT'),
        password=env.str('REDIS_PASSWORD'),
        decode_responses=True
    )


def get_products(env):
    strapi_url = env.str('STRAPI_URL')
    strapi_token = env.str('STRAPI_TOKEN')
    headers = {'Authorization': f'Bearer {strapi_token}'}
    params = {'populate': '*'}
    response = requests.get(f'{strapi_url}/api/products', headers=headers, params=params)
    response.raise_for_status()
    return response.json()['data']


def start(update, context):
    """–ù–∞—á–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        products = get_products(context.bot_data['env'])
        context.user_data['products'] = products

        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        welcome_text = (
            "üêü <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —Ä—ã–±–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω!</b>\n\n"
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Å–≤–µ–∂—É—é —Ä—ã–±—É –≤—ã—Å–æ—á–∞–π—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞.\n"
            "–í—Å–µ —Ç–æ–≤–∞—Ä—ã –ø—Ä–æ–¥–∞—é—Ç—Å—è –Ω–∞ –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )

        keyboard = []

        if products:
            keyboard.append([InlineKeyboardButton('üé£ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä—ã–±—É', callback_data='show_products')])

        keyboard.extend([
            [InlineKeyboardButton('üõí –ú–æ—è –∫–æ—Ä–∑–∏–Ω–∞', callback_data='view_cart')],
            [InlineKeyboardButton('‚ÑπÔ∏è –û –º–∞–≥–∞–∑–∏–Ω–µ', callback_data='about')]
        ])

        if update.message:
            update.message.reply_text(
                welcome_text,
                parse_mode='HTML',
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            # –ï—Å–ª–∏ –≤—ã–∑–≤–∞–Ω–æ –∏–∑ callback
            query = update.callback_query
            safe_edit_message(
                query, context, welcome_text, keyboard, parse_mode='HTML'
            )

        return HANDLE_MENU
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start: {e}")
        error_message = '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        if update.message:
            update.message.reply_text(error_message)
        return ConversationHandler.END


def show_products_list(update, context):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
    query = update.callback_query
    query.answer()

    products = context.user_data.get('products', [])
    if not products:
        safe_edit_message(
            query, context,
            'üìã –°–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤',
            [[InlineKeyboardButton('‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu')]]
        )
        return HANDLE_MENU

    keyboard = [
        [InlineKeyboardButton(f"üêü {product['title']}", callback_data=str(product['id']))]
        for product in products
    ]
    keyboard.extend([
        [InlineKeyboardButton('üõí –ú–æ—è –∫–æ—Ä–∑–∏–Ω–∞', callback_data='view_cart')],
        [InlineKeyboardButton('‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu')]
    ])

    safe_edit_message(
        query, context,
        'üé£ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä—ã–±—É:</b>',
        keyboard,
        parse_mode='HTML'
    )
    return HANDLE_MENU


def show_about(update, context):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞–≥–∞–∑–∏–Ω–µ"""
    query = update.callback_query
    query.answer()

    about_text = (
        "‚ÑπÔ∏è <b>–û –Ω–∞—à–µ–º —Ä—ã–±–Ω–æ–º –º–∞–≥–∞–∑–∏–Ω–µ</b>\n\n"
        "üåä –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–≤–µ–∂—É—é —Ä—ã–±—É –≤—ã—Å–æ—á–∞–π—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞\n"
        "üì¶ –í—Å–µ —Ç–æ–≤–∞—Ä—ã –ø—Ä–æ–¥–∞—é—Ç—Å—è –Ω–∞ –≤–µ—Å (–≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö)\n"
        "üöö –ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≤—Å–µ–º—É –≥–æ—Ä–æ–¥—É\n"
        "üí≥ –£–¥–æ–±–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏\n\n"
        "–î–ª—è –∑–∞–∫–∞–∑–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä—ã–±—É –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ –∫–æ—Ä–∑–∏–Ω—É!"
    )

    keyboard = [
        [InlineKeyboardButton('üé£ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä—ã–±—É', callback_data='show_products')],
        [InlineKeyboardButton('‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu')]
    ]

    safe_edit_message(
        query, context, about_text, keyboard, parse_mode='HTML'
    )
    return HANDLE_MENU


def handle_product_selection(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é"""
    query = update.callback_query
    query.answer()

    # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    if query.data == 'main_menu':
        return start(update, context)
    elif query.data == 'show_products':
        return show_products_list(update, context)
    elif query.data == 'about':
        return show_about(update, context)
    elif query.data == 'view_cart':
        return view_cart(update, context)
    elif query.data == 'back_to_products':
        return show_products_list(update, context)
    elif query.data.startswith('add_'):
        product_id = query.data.split('_')[1]
        return ask_quantity(update, context, product_id)

    # –ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–µ
    product = get_selected_product(query.data, context)
    if not product:
        safe_edit_message(
            query, context,
            '‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω',
            [[InlineKeyboardButton('üé£ –ö —Å–ø–∏—Å–∫—É —Ä—ã–±—ã', callback_data='show_products')]]
        )
        return HANDLE_MENU

    show_product_details(query, context, product)
    return HANDLE_MENU


def ask_quantity(update, context, product_id):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É"""
    query = update.callback_query
    context.user_data['current_product'] = product_id

    product = get_selected_product(product_id, context)
    product_name = product['title'] if product else '—Ç–æ–≤–∞—Ä'

    text = f"üì¶ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b>\nüêü {product_name}"

    keyboard = [
        [InlineKeyboardButton("0.5 –∫–≥", callback_data=f"qty_0.5_{product_id}")],
        [InlineKeyboardButton("1 –∫–≥", callback_data=f"qty_1.0_{product_id}")],
        [InlineKeyboardButton("1.5 –∫–≥", callback_data=f"qty_1.5_{product_id}")],
        [InlineKeyboardButton("2 –∫–≥", callback_data=f"qty_2.0_{product_id}")],
        [InlineKeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ —Å–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data="custom_qty")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä—É", callback_data=product_id)]
    ]

    safe_edit_message(query, context, text, keyboard, parse_mode='HTML')
    return HANDLE_QUANTITY


def handle_quantity_selection(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
    query = update.callback_query
    query.answer()

    if query.data == 'custom_qty':
        safe_edit_message(
            query, context,
            "‚úèÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö</b>\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 1.5 –∏–ª–∏ 2.3\n"
            "–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 0.1 –∫–≥",
            [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_qty")]],
            parse_mode='HTML'
        )
        return HANDLE_QUANTITY

    if query.data == 'cancel_qty':
        product_id = context.user_data.get('current_product')
        if product_id:
            return ask_quantity(update, context, product_id)
        else:
            return show_products_list(update, context)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
    if query.data.startswith('qty_'):
        _, qty, product_id = query.data.split('_')
        return add_to_cart_handler(update, context, product_id, float(qty))

    # –í–æ–∑–≤—Ä–∞—Ç –∫ —Ç–æ–≤–∞—Ä—É
    product_id = query.data
    product = get_selected_product(product_id, context)
    if product:
        show_product_details(query, context, product)
        return HANDLE_MENU

    return show_products_list(update, context)


def handle_custom_quantity(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
    try:
        text = update.message.text.replace(',', '.')  # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∑–∞–ø—è—Ç–æ–π –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è
        qty = float(text)

        if qty <= 0:
            update.message.reply_text(
                "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0\n"
                "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1.5):"
            )
            return HANDLE_QUANTITY

        if qty < 0.1:
            update.message.reply_text(
                "‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 0.1 –∫–≥\n"
                "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç 0.1 –∫–≥:"
            )
            return HANDLE_QUANTITY

        if qty > 50:  # –†–∞–∑—É–º–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
            update.message.reply_text(
                "‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 50 –∫–≥\n"
                "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ 50 –∫–≥:"
            )
            return HANDLE_QUANTITY

        product_id = context.user_data.get('current_product')
        if not product_id:
            update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω")
            return start(update, context)

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            context.bot.delete_message(
                chat_id=update.message.chat_id,
                message_id=update.message.message_id
            )
        except Exception:
            pass

        return add_to_cart_handler(update, context, str(product_id), qty)

    except ValueError:
        update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1.5):"
        )
        return HANDLE_QUANTITY


def add_to_cart_handler(update, context, product_id_str, quantity=1.0):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É"""
    try:
        product_id = int(product_id_str)
        env = context.bot_data['env']

        if update.callback_query:
            query = update.callback_query
            tg_id = str(query.from_user.id)
            chat_id = query.message.chat_id
        else:
            tg_id = str(update.message.from_user.id)
            chat_id = update.message.chat_id

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ
        product = get_selected_product(str(product_id), context)
        if not product:
            raise ValueError("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")

        cart = get_cart(env, tg_id) or create_cart(env, tg_id)
        add_to_cart(env, cart['id'], product_id, quantity)

        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
        success_text = (
            f"‚úÖ <b>–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É:</b>\n"
            f"üêü {product['title']}\n"
            f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity} –∫–≥\n"
            f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {quantity * product['price']} —Ä—É–±."
        )

        keyboard = [
            [InlineKeyboardButton('üõí –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É', callback_data='view_cart')],
            [InlineKeyboardButton('üé£ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏', callback_data='show_products')],
            [InlineKeyboardButton('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu')]
        ]

        if update.callback_query:
            safe_edit_message(update.callback_query, context, success_text, keyboard, parse_mode='HTML')
        else:
            context.bot.send_message(
                chat_id=chat_id,
                text=success_text,
                parse_mode='HTML',
                reply_markup=InlineKeyboardMarkup(keyboard)
            )

        return HANDLE_MENU

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É: {e}")
        error_text = '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É'

        if update.callback_query:
            update.callback_query.answer(error_text)
            return show_products_list(update, context)
        else:
            update.message.reply_text(error_text)
            return start(update, context)


def view_cart(update, context):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã"""
    query = update.callback_query
    query.answer()

    try:
        tg_id = str(query.from_user.id)
        cart = get_cart(context.bot_data['env'], tg_id)

        if not cart or not cart.get('cart_products'):
            keyboard = [
                [InlineKeyboardButton('üé£ –ö –ø–æ–∫—É–ø–∫–∞–º', callback_data='show_products')],
                [InlineKeyboardButton('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu')]
            ]
            safe_edit_message(
                query, context,
                'üõí <b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</b>\n\n–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞!',
                keyboard,
                parse_mode='HTML'
            )
            return HANDLE_MENU

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º –∫–æ—Ä–∑–∏–Ω—ã
        message = "üõí <b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:</b>\n\n"
        total = 0

        for item in cart['cart_products']:
            product = item['product']
            item_total = item['quantity'] * product['price']
            message += (
                f"üêü <b>{product['title']}</b>\n"
                f"üì¶ {item['quantity']} –∫–≥ √ó {product['price']} —Ä—É–±. = {item_total} —Ä—É–±.\n\n"
            )
            total += item_total

        message += f"üíµ <b>–ò—Ç–æ–≥–æ: {total} —Ä—É–±.</b>"

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard = []

        # –ö–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ - –∏—Å–ø–æ–ª—å–∑—É–µ–º ID –∏–∑ cart_products
        for item in cart['cart_products']:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID –∑–∞–ø–∏—Å–∏ cart-product
            cart_product_id = item.get('id')
            if cart_product_id:
                keyboard.append([InlineKeyboardButton(
                    f"‚ùå –£–¥–∞–ª–∏—Ç—å {item['product']['title']}",
                    callback_data=f'remove_{cart_product_id}'
                )])
                logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ID: {cart_product_id}")

        # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        keyboard.extend([
            [InlineKeyboardButton('üìû –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', callback_data='checkout')],
            [InlineKeyboardButton('üé£ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏', callback_data='show_products')],
            [InlineKeyboardButton('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu')]
        ])

        safe_edit_message(query, context, message, keyboard, parse_mode='HTML')
        return HANDLE_CART

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ—Ä–∑–∏–Ω—ã: {e}")
        safe_edit_message(
            query, context,
            '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É',
            [[InlineKeyboardButton('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu')]]
        )
        return HANDLE_MENU


def handle_cart_actions(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
    query = update.callback_query
    query.answer()

    if query.data == 'main_menu':
        return start(update, context)
    elif query.data == 'show_products':
        return show_products_list(update, context)
    elif query.data == 'checkout':
        return handle_checkout(update, context)
    elif query.data.startswith('remove_'):
        return remove_from_cart(update, context, query.data.split('_')[1])

    return HANDLE_CART


def handle_checkout(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    query = update.callback_query

    checkout_text = (
        "üìû <b>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</b>\n\n"
        "–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏:\n"
        "üì± –¢–µ–ª–µ—Ñ–æ–Ω: +7 (XXX) XXX-XX-XX\n"
        "üí¨ Telegram: @your_shop_bot\n\n"
        "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏!"
    )

    keyboard = [
        [InlineKeyboardButton('üõí –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–æ—Ä–∑–∏–Ω—É', callback_data='view_cart')],
        [InlineKeyboardButton('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu')]
    ]

    safe_edit_message(query, context, checkout_text, keyboard, parse_mode='HTML')
    return HANDLE_CART


def remove_from_cart(update, context, item_id):
    """–£–¥–∞–ª—è–µ—Ç —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    query = update.callback_query

    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è item_id
        try:
            item_id = int(item_id)
        except (ValueError, TypeError):
            logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —Ç–æ–≤–∞—Ä–∞: {item_id}")
            query.answer('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —Ç–æ–≤–∞—Ä–∞')
            return HANDLE_CART

        env = context.bot_data['env']
        strapi_url = env.str('STRAPI_URL')
        strapi_token = env.str('STRAPI_TOKEN')
        headers = {'Authorization': f'Bearer {strapi_token}'}

        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ —Å ID: {item_id}")

        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–æ–≤–∞—Ä
        check_response = requests.get(
            f'{strapi_url}/api/cart-products/{item_id}',
            headers=headers,
            timeout=10
        )

        if check_response.status_code == 404:
            logger.warning(f"–¢–æ–≤–∞—Ä —Å ID {item_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            query.answer('‚ö†Ô∏è –¢–æ–≤–∞—Ä —É–∂–µ —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã')
            return view_cart(update, context)

        # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–¥–∞–ª—è–µ–º –µ–≥–æ
        delete_response = requests.delete(
            f'{strapi_url}/api/cart-products/{item_id}',
            headers=headers,
            timeout=10
        )

        logger.info(f"–û—Ç–≤–µ—Ç API –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {delete_response.status_code}")

        if delete_response.status_code in [200, 204]:
            query.answer('‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã')
            return view_cart(update, context)
        else:
            logger.error(f"–û—à–∏–±–∫–∞ API –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {delete_response.status_code}, {delete_response.text}")
            query.answer('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä')
            return HANDLE_CART

    except requests.exceptions.Timeout:
        logger.error("Timeout –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞")
        query.answer('‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        return HANDLE_CART
    except requests.exceptions.ConnectionError:
        logger.error("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞")
        query.answer('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç')
        return HANDLE_CART
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")
        query.answer('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ')
        return HANDLE_CART
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")
        query.answer('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞')
        return HANDLE_CART


def get_selected_product(product_id_str, context):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–¥—É–∫—Ç –ø–æ ID"""
    try:
        product_id = int(product_id_str)
    except ValueError:
        return None

    products = context.user_data.get('products', [])
    return next((p for p in products if p['id'] == product_id), None)


def show_product_details(query, context, product):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ"""
    message_text = (
        f"üêü <b>{product['title']}</b>\n\n"
        f"{product['description']}\n\n"
        f"üíµ <b>–¶–µ–Ω–∞: {product['price']} —Ä—É–±./–∫–≥</b>"
    )

    keyboard = [
        [InlineKeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É', callback_data=f'add_{product["id"]}')],
        [InlineKeyboardButton('üõí –ú–æ—è –∫–æ—Ä–∑–∏–Ω–∞', callback_data='view_cart')],
        [InlineKeyboardButton('‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É —Ä—ã–±—ã', callback_data='back_to_products')],
        [InlineKeyboardButton('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu')]
    ]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É –ø—Ä–æ–¥—É–∫—Ç–∞
    if product.get('image') and product['image'].get('url'):
        try:
            # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            context.bot.delete_message(
                chat_id=query.message.chat_id,
                message_id=query.message.message_id
            )
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
            send_product_photo(query, context, product, message_text, InlineKeyboardMarkup(keyboard))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç
            safe_edit_message(query, context, message_text, keyboard, parse_mode='HTML')
    else:
        safe_edit_message(query, context, message_text, keyboard, parse_mode='HTML')


def safe_edit_message(query, context, text, keyboard, parse_mode=None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å fallback –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–æ–≤–æ–≥–æ"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –ª–∏ –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ
        current_text = query.message.text or query.message.caption or ""
        if current_text.strip() == text.strip():
            # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            return

        query.edit_message_text(
            text=text,
            parse_mode=parse_mode,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        try:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            context.bot.delete_message(
                chat_id=query.message.chat_id,
                message_id=query.message.message_id
            )
        except Exception:
            pass

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        context.bot.send_message(
            chat_id=query.message.chat_id,
            text=text,
            parse_mode=parse_mode,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )


def send_product_photo(query, context, product, caption, reply_markup):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ –ø—Ä–æ–¥—É–∫—Ç–∞"""
    try:
        base_url = context.bot_data['env'].str('STRAPI_URL').rstrip('/')
        image_path = product['image']['url']

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ –ø—É—Ç—å —Å http (–ø–æ–ª–Ω—ã–π URL) –∏–ª–∏ —ç—Ç–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å
        if image_path.startswith('http'):
            image_url = image_path
        else:
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–ª–µ—à–∏
            image_path = image_path.lstrip('/')
            image_url = f"{base_url}/{image_path}"

        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image_url}")

        response = requests.get(image_url, stream=True, timeout=10)
        response.raise_for_status()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        content_type = response.headers.get('content-type', '')
        if not content_type.startswith('image/'):
            logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {content_type}")
            raise ValueError("–§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º")

        with BytesIO(response.content) as photo_data:
            photo_data.seek(0)
            context.bot.send_photo(
                chat_id=query.message.chat_id,
                photo=photo_data,
                caption=caption,
                parse_mode='HTML',
                reply_markup=reply_markup
            )
            logger.info("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

    except requests.exceptions.Timeout:
        logger.error("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        raise
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
        raise


def get_cart(env, tg_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    strapi_url = env.str('STRAPI_URL')
    strapi_token = env.str('STRAPI_TOKEN')
    headers = {'Authorization': f'Bearer {strapi_token}'}

    params = {
        'filters[tg_id][$eq]': str(tg_id),
        'populate[cart_products][populate][0]': 'product'
    }

    response = requests.get(f'{strapi_url}/api/carts', headers=headers, params=params)
    response.raise_for_status()

    carts = response.json()['data']
    return carts[0] if carts else None


def create_cart(env, tg_id):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∫–æ—Ä–∑–∏–Ω—É"""
    strapi_url = env.str('STRAPI_URL')
    strapi_token = env.str('STRAPI_TOKEN')
    headers = {
        'Authorization': f'Bearer {strapi_token}',
        'Content-Type': 'application/json'
    }

    data = {
        'data': {
            'tg_id': str(tg_id)
        }
    }

    response = requests.post(f'{strapi_url}/api/carts', headers=headers, json=data)
    response.raise_for_status()
    return response.json()['data']


def add_to_cart(env, cart_id, product_id, quantity=1.0):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É"""
    strapi_url = env.str('STRAPI_URL')
    strapi_token = env.str('STRAPI_TOKEN')
    headers = {
        'Authorization': f'Bearer {strapi_token}',
        'Content-Type': 'application/json'
    }

    data = {
        "data": {
            "quantity": float(quantity),
            "product": int(product_id),
            "cart": int(cart_id)
        }
    }

    try:
        response = requests.post(
            f'{strapi_url}/api/cart-products',
            headers=headers,
            json=data
        )
        response.raise_for_status()
        return response.json()['data']
    except requests.exceptions.HTTPError as e:
        error_msg = e.response.json().get('error', {}).get('message', str(e))
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É: {error_msg}")
        raise ValueError(f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {error_msg}")
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        raise


def error_handler(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error("–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", exc_info=context.error)

    if update and update.effective_chat:
        try:
            context.bot.send_message(
                chat_id=update.effective_chat.id,
                text='‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start'
            )
        except Exception:
            pass


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logging.basicConfig(
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        level=logging.INFO
    )

    try:
        env = Env()
        env.read_env()

        redis_conn = get_database_connection(env)
        redis_conn.ping()

        updater = Updater(env.str('TG_BOT_TOKEN'))
        dispatcher = updater.dispatcher

        dispatcher.bot_data['env'] = env
        dispatcher.bot_data['redis'] = redis_conn

        dispatcher.add_error_handler(error_handler)

        conv_handler = ConversationHandler(
            entry_points=[CommandHandler('start', start)],
            states={
                HANDLE_MENU: [CallbackQueryHandler(handle_product_selection)],
                HANDLE_CART: [CallbackQueryHandler(handle_cart_actions)],
                HANDLE_QUANTITY: [
                    CallbackQueryHandler(handle_quantity_selection),
                    MessageHandler(Filters.text & ~Filters.command, handle_custom_quantity)
                ]
            },
            fallbacks=[CommandHandler('start', start)],
        )

        dispatcher.add_handler(conv_handler)

        logger.info('üêü –†—ã–±–Ω—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!')
        updater.start_polling()
        updater.idle()

    except redis.exceptions.ConnectionError as e:
        logger.critical(f'‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: {e}')
    except requests.exceptions.RequestException as e:
        logger.critical(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å API: {e}')
    except Exception as e:
        logger.critical('‚ùå –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', exc_info=True)


if __name__ == '__main__':
    main()
